1. Client Keystore and Certificate Creation
Generate client certificates and keystore for Kafka users using keytool for SSL authentication:

bash
# Generate keystore for the client
keytool -genkey -alias user1 -keyalg RSA -keystore user1.keystore.jks -keysize 2048 \
  -dname "CN=user1, OU=dept, O=company, L=city, S=state, C=US" \
  -storepass client_keystore_password -keypass client_keystore_password

# Export the certificate from keystore
keytool -export -alias user1 -file user1-cert.pem -keystore user1.keystore.jks \
  -storepass client_keystore_password

# Add client certificate to server truststore
keytool -import -alias user1 -file user1-cert.pem -keystore kafka.server.truststore.jks \
  -storepass server_truststore_password -noprompt
This sets up a user1.keystore.jks for the client and adds their certificate to the Kafka server's truststore.

2. Server Configuration for SSL
Update server.properties on Kafka brokers to enable SSL with the keystore and truststore for secure communication:

properties
ssl.keystore.location=/etc/kafka/ssl/kafka.server.keystore.jks
ssl.keystore.password=server_keystore_password
ssl.key.password=server_keystore_password
ssl.truststore.location=/etc/kafka/ssl/kafka.server.truststore.jks
ssl.truststore.password=server_truststore_password
security.protocol=SSL
ssl.client.auth=required
3. Assign Pattern-Based ACLs
Use Kafka ACLs to assign topic permissions based on patterns for the user:

bash
# Allow user1 to produce and consume from topics matching 'user-*'
kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 \
  --add --allow-principal User:user1 --operation Read --operation Write --topic user-*
This ensures that user1 can only access topics that begin with user-*.

4. Automate with Ansible
Extend your Ansible playbook to handle keystore distribution and configuration:

yaml
---
- name: Secure Kafka with Keystore and Pattern-Based ACLs
  hosts: kafka_nodes
  become: true
  tasks:
    - name: Copy Server Keystore and Truststore
      copy:
        src: "/local/path/to/{{ item }}"
        dest: "/etc/kafka/ssl/{{ item }}"
        owner: kafka
        group: kafka
        mode: '0600'
      with_items:
        - kafka.server.keystore.jks
        - kafka.server.truststore.jks

    - name: Copy Client Keystore for User1
      copy:
        src: "/local/path/to/user1.keystore.jks"
        dest: "/etc/kafka/ssl/user1.keystore.jks"
        owner: kafka
        group: kafka
        mode: '0600'

    - name: Update Kafka Server Properties
      lineinfile:
        path: /etc/kafka/server.properties
        regexp: '^{{ item }}='
        line: "{{ item }}"
        create: yes
      with_items:
        - "ssl.keystore.location=/etc/kafka/ssl/kafka.server.keystore.jks"
        - "ssl.keystore.password=server_keystore_password"
        - "ssl.key.password=server_keystore_password"
        - "ssl.truststore.location=/etc/kafka/ssl/kafka.server.truststore.jks"
        - "ssl.truststore.password=server_truststore_password"
        - "security.protocol=SSL"
        - "ssl.client.auth=required"

    - name: Add Pattern-Based ACLs for User
      shell: |
        kafka-acls --authorizer-properties zookeeper.connect=localhost:2181 \
        --add --allow-principal User:user1 --operation Write --operation Read --topic user-*
5. Client Configuration
Configure the Kafka client (consumer.properties or producer.properties) to use the keystore:

properties
security.protocol=SSL
ssl.keystore.location=/path/to/user1.keystore.jks
ssl.keystore.password=client_keystore_password
ssl.truststore.location=/path/to/kafka.server.truststore.jks
ssl.truststore.password=server_truststore_password
This setup ensures secure communication using keystores and provides controlled access with pattern-based ACLs. If you'd like further assistance with deployment or testing, let me know!