---

### **1. Configuring SASL/PLAIN for Zookeeper and Kafka**
#### **Zookeeper Configuration**
Update `zookeeper.properties` on all Zookeeper nodes:
```plaintext
authProvider.1=org.apache.zookeeper.server.auth.SASLAuthenticationProvider
requireClientAuthScheme=sasl
```

Create a JAAS configuration for Zookeeper (e.g., `zookeeper_jaas.conf`):
```plaintext
Server {
    org.apache.zookeeper.server.auth.DigestLoginModule required
    user_admin="admin-password";
    user_alice="alice-password";
    user_bob="bob-password";
};
```

Start Zookeeper with the JAAS config:
```bash
export KAFKA_OPTS="-Djava.security.auth.login.config=/path/to/zookeeper_jaas.conf"
bin/zookeeper-server-start.sh config/zookeeper.properties
```

#### **Kafka Broker Configuration**
Update `server.properties` on all Kafka brokers:
```plaintext
listeners=SASL_PLAINTEXT://:9092
advertised.listeners=SASL_PLAINTEXT://<broker-host>:9092
sasl.enabled.mechanisms=PLAIN
sasl.mechanism.inter.broker.protocol=PLAIN
inter.broker.listener.name=SASL_PLAINTEXT
zookeeper.connect=<zookeeper1>:2181,<zookeeper2>:2181,<zookeeper3>:2181
```

Create a JAAS configuration for Kafka brokers (e.g., `kafka_broker_jaas.conf`):
```plaintext
KafkaServer {
    org.apache.kafka.common.security.plain.PlainLoginModule required
    username="admin" password="admin-password";
    username="alice" password="alice-password";
    username="bob" password="bob-password";
};
```

Start Kafka with the JAAS config:
```bash
export KAFKA_OPTS="-Djava.security.auth.login.config=/path/to/kafka_broker_jaas.conf"
bin/kafka-server-start.sh config/server.properties
```

---

### **2. Adding ACLs for Users**
Use the `kafka-acls.sh` script to define access controls for each user.

#### **Grant Admin Access to Admin User**
```bash
bin/kafka-acls.sh --bootstrap-server localhost:9092 \
    --add --allow-principal User:admin \
    --operation All --cluster
```

#### **Grant Read/Write Access to Specific Topics**
- **Alice (Write Access on Topic1):**
  ```bash
  bin/kafka-acls.sh --bootstrap-server localhost:9092 \
      --add --allow-principal User:alice \
      --operation Write --topic Topic1
  ```

- **Bob (Read Access on Topic2):**
  ```bash
  bin/kafka-acls.sh --bootstrap-server localhost:9092 \
      --add --allow-principal User:bob \
      --operation Read --topic Topic2
  ```

#### **Grant Access to Multiple Topics using Patterns**
- **Alice (Read/Write Access to topics matching `Test-*`):**
  ```bash
  bin/kafka-acls.sh --bootstrap-server localhost:9092 \
      --add --allow-principal User:alice \
      --operation Read --operation Write --topic Test-*
  ```

---

### **3. Configuring Kafka Clients**
#### **Create Individual JAAS Configs for Each User**
- **Alice (`alice_jaas.conf`):**
  ```plaintext
  KafkaClient {
      org.apache.kafka.common.security.plain.PlainLoginModule required
      username="alice"
      password="alice-password";
  };
  ```

- **Bob (`bob_jaas.conf`):**
  ```plaintext
  KafkaClient {
      org.apache.kafka.common.security.plain.PlainLoginModule required
      username="bob"
      password="bob-password";
  };
  ```

#### **Client Properties**
Each user should have a client properties file:
- **Alice (`alice_client.properties`):**
  ```plaintext
  security.protocol=SASL_PLAINTEXT
  sasl.mechanism=PLAIN
  sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
      username="alice" \
      password="alice-password";
  ```

- **Bob (`bob_client.properties`):**
  ```plaintext
  security.protocol=SASL_PLAINTEXT
  sasl.mechanism=PLAIN
  sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
      username="bob" \
      password="bob-password";
  ```

---

### **4. List Users and Access**
Unfortunately, Kafka doesn't provide a direct command to list all users and their ACLs. However, you can use the `kafka-acls.sh` script to check ACLs for specific resources or principals:

#### **List ACLs for All Users**
```bash
bin/kafka-acls.sh --bootstrap-server localhost:9092 --list
```

This will output all ACLs, showing which users (principals) have access to which resources and operations.

---

### **5. Testing the Configuration**
- **Alice Producing to `Topic1`:**
  ```bash
  bin/kafka-console-producer.sh --bootstrap-server localhost:9092 \
      --topic Topic1 --producer.config alice_client.properties
  ```

- **Bob Consuming from `Topic2`:**
  ```bash
  bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 \
      --topic Topic2 --from-beginning --consumer.config bob_client.properties
  ```

---

This setup provides secure authentication and authorization for multiple users in a Kafka cluster while allowing you to manage their permissions dynamically. Let me know if you need further guidance!
