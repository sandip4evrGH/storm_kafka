```bash
# 1. Generate Node ID
NODE_ID=$(uuidgen)

# 2. Generate User Passwords
PASSWORD=$(openssl rand -base64 32)
ADMIN_PASSWORD=$(openssl rand -base64 32)

# 3. Server Configuration (config/kraft/server.properties)
cat <<EOF > config/kraft/server.properties
node.id=$NODE_ID
process.roles=broker,controller
controller.quorum.voters=$NODE_ID@localhost:9093
listeners=PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093,SASL_PLAINTEXT://localhost:9094
advertised.listeners=PLAINTEXT://localhost:9092,SASL_PLAINTEXT://localhost:9094
log.dirs=/var/lib/kafka-data
security.inter.broker.protocol=SASL_PLAINTEXT
sasl.mechanism.inter.broker.protocol=SCRAM-SHA-512
sasl.enabled.mechanisms=SCRAM-SHA-512
listener.security.protocol.map=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT
super.users=User:admin
authorizer.class.name=kafka.security.authorizer.AclAuthorizer
allow.everyone.if.no.acl.found=false
EOF

# 4. User Configuration (producer.properties, consumer.properties, admin-client.properties)

cat <<EOF > config/producer.properties
security.protocol=SASL_PLAINTEXT
sasl.mechanism=SCRAM-SHA-512
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="myuser" password="$PASSWORD";
EOF

cat <<EOF > config/consumer.properties
security.protocol=SASL_PLAINTEXT
sasl.mechanism=SCRAM-SHA-512
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="myuser" password="$PASSWORD";
EOF

cat <<EOF > config/admin-client.properties
security.protocol=SASL_PLAINTEXT
sasl.mechanism=SCRAM-SHA-512
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="admin" password="$ADMIN_PASSWORD";
EOF

# 5. Create Users
bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --add-config 'SCRAM-SHA-512=[iterations=8192,password=$PASSWORD]' --entity-type users --entity-name myuser
bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --add-config 'SCRAM-SHA-512=[iterations=8192,password=$ADMIN_PASSWORD]' --entity-type users --entity-name admin

# 6. Start Kafka
bin/kafka-server-start.sh config/kraft/server.properties

# 7. Create Topic (Admin)
bin/kafka-topics.sh --bootstrap-server localhost:9094 --create --topic my-secure-topic --partitions 1 --replication-factor 1 --command-config config/admin-client.properties

# 8. Create ACLs (Admin)
bin/kafka-acls.sh --bootstrap-server localhost:9094 --add --allow-principal User:myuser --topic my-secure-topic --operation Write --command-config config/admin-client.properties
bin/kafka-acls.sh --bootstrap-server localhost:9094 --add --allow-principal User:myuser --topic my-secure-topic --operation Read --command-config config/admin-client.properties

# 9. Test Producer (myuser)
bin/kafka-console-producer.sh --bootstrap-server localhost:9094 --topic my-secure-topic --producer.config config/producer.properties

# 10. Test Consumer (myuser)
bin/kafka-console-consumer.sh --bootstrap-server localhost:9094 --topic my-secure-topic --from-beginning --consumer.config config/consumer.properties

# 11. Describe ACLs (Admin)
bin/kafka-acls.sh --bootstrap-server localhost:9094 --describe --topic my-secure-topic --command-config config/admin-client.properties

# 12. Describe Topic (Admin)
bin/kafka-topics.sh --bootstrap-server localhost:9094 --describe --topic my-secure-topic --command-config config/admin-client.properties
```

**Key Changes:**

* **SCRAM-SHA-512:**
    * All instances of `SCRAM-SHA-256` have been replaced with `SCRAM-SHA-512`. This includes:
        * `sasl.mechanism.inter.broker.protocol=SCRAM-SHA-512` in `server.properties`.
        * `sasl.enabled.mechanisms=SCRAM-SHA-512` in `server.properties`.
        * `sasl.mechanism=SCRAM-SHA-512` in `producer.properties`, `consumer.properties`, and `admin-client.properties`.
        * `bin/kafka-configs.sh --alter --add-config 'SCRAM-SHA-512=[iterations=8192,password=$PASSWORD]'` when creating the users.
* **No other changes:** All other configurations and commands remain the same, as they are not affected by the change in the SCRAM mechanism.

**Important Considerations:**

* SCRAM-SHA-512 provides stronger security than SCRAM-SHA-256.
* Ensure that your Kafka clients and other applications support SCRAM-SHA-512.
* As always, store your passwords securely.
* The `allow.everyone.if.no.acl.found=false` is very important.
