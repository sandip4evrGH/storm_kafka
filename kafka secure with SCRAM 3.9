```bash
# 1. Download and Extract Kafka 3.9.0
wget https://downloads.apache.org/kafka/3.9.0/kafka_2.13-3.9.0.tgz
tar -xzf kafka_2.13-3.9.0.tgz
cd kafka_2.13-3.9.0

# 2. Create Kafka Data Directory
mkdir -p /var/lib/kafka-data

# 3. Generate Node ID
NODE_ID=$(uuidgen)

# 4. Generate SSL Certificates (Self-Signed for Testing)
# Replace with proper certificates for production
KEYSTORE_PASS="kafkastore"
TRUSTSTORE_PASS="kafkastore"

keytool -genkey -alias kafka -keyalg RSA -keystore kafka.keystore.jks -validity 365 -storepass $KEYSTORE_PASS -dname "CN=localhost"
keytool -export -alias kafka -keystore kafka.keystore.jks -file kafka.cer -storepass $KEYSTORE_PASS
keytool -import -alias kafka -file kafka.cer -keystore kafka.truststore.jks -storepass $TRUSTSTORE_PASS

# 5. Server Configuration (config/kraft/server.properties)
cat <<EOF > config/kraft/server.properties
node.id=$NODE_ID
process.roles=broker,controller
controller.quorum.voters=$NODE_ID@localhost:9093
listeners=PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093,SSL://localhost:9094
advertised.listeners=SSL://localhost:9094
log.dirs=/var/lib/kafka-data
security.inter.broker.protocol=SSL
listener.security.protocol.map=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,SSL:SSL
ssl.keystore.location=kafka.keystore.jks
ssl.keystore.password=$KEYSTORE_PASS
ssl.truststore.location=kafka.truststore.jks
ssl.truststore.password=$TRUSTSTORE_PASS
ssl.client.auth=none # or requested or required
zookeeper.connect=unused
EOF

# 6. Start Kafka Server
bin/kafka-server-start.sh config/kraft/server.properties

# 7. Client Configuration (producer.properties, consumer.properties, admin-client.properties)

cat <<EOF > config/producer.properties
security.protocol=SSL
ssl.truststore.location=kafka.truststore.jks
ssl.truststore.password=$TRUSTSTORE_PASS
EOF

cat <<EOF > config/consumer.properties
security.protocol=SSL
ssl.truststore.location=kafka.truststore.jks
ssl.truststore.password=$TRUSTSTORE_PASS
EOF

cat <<EOF > config/admin-client.properties
security.protocol=SSL
ssl.truststore.location=kafka.truststore.jks
ssl.truststore.password=$TRUSTSTORE_PASS
EOF

# 8. Create Topic (Admin)
bin/kafka-topics.sh --bootstrap-server localhost:9094 --create --topic my-ssl-topic --partitions 1 --replication-factor 1 --command-config config/admin-client.properties

# 9. Produce Messages (SSL)
bin/kafka-console-producer.sh --bootstrap-server localhost:9094 --topic my-ssl-topic --producer.config config/producer.properties

# 10. Consume Messages (SSL)
bin/kafka-console-consumer.sh --bootstrap-server localhost:9094 --topic my-ssl-topic --from-beginning --consumer.config config/consumer.properties

# 11. Describe Topic (Admin)
bin/kafka-topics.sh --bootstrap-server localhost:9094 --describe --topic my-ssl-topic --command-config config/admin-client.properties
```

**Explanation and Key Points:**

1.  **Download and Extract:** Downloads and extracts Kafka 3.9.0.
2.  **Data Directory:** Creates the directory for Kafka data.
3.  **Node ID:** Generates a unique node ID.
4.  **Generate SSL Certificates:**
    * `keytool` is used to create self-signed certificates for testing.
    * **For production, replace these with certificates from a trusted CA.**
    * `kafka.keystore.jks`: Contains the Kafka broker's private key and certificate.
    * `kafka.truststore.jks`: Contains the trusted certificates (in this case, the broker's own certificate).
    * The passwords for both keystore and truststore are set to "kafkastore" for testing.
5.  **Server Configuration:**
    * `listeners=SSL://localhost:9094`: Enables SSL on port 9094.
    * `advertised.listeners=SSL://localhost:9094`: Advertises the SSL listener to clients.
    * `security.inter.broker.protocol=SSL`: Enables SSL for inter-broker communication.
    * `listener.security.protocol.map=SSL:SSL`: Maps the SSL listener to the SSL protocol.
    * `ssl.keystore.location`, `ssl.keystore.password`, `ssl.truststore.location`, `ssl.truststore.password`: Specifies the locations and passwords for the keystore and truststore.
    * `ssl.client.auth=none`: Disables client authentication. You can set it to `requested` or `required` for mutual TLS.
6.  **Start Kafka Server:** Starts the Kafka broker.
7.  **Client Configuration:**
    * `producer.properties`, `consumer.properties`, and `admin-client.properties`: Configure the clients to use SSL.
    * `ssl.truststore.location` and `ssl.truststore.password`: Specifies the truststore for the clients.
8.  **Create Topic:** Creates the `my-ssl-topic` topic.
9.  **Produce Messages:** Produces messages to the topic over SSL.
10. **Consume Messages:** Consumes messages from the topic over SSL.
11. **Describe Topic:** Describes the topic.

**Important Notes:**

* **Production Certificates:** Replace the self-signed certificates with certificates from a trusted CA for production use.
* **Client Authentication:** Consider enabling client authentication (`ssl.client.auth=required`) for enhanced security.
* **Port Numbers:** Adjust the port numbers as needed.
* **Keystore/Truststore Security:** Store the keystore and truststore files securely.
* **Firewall:** Ensure that the necessary ports are open in your firewall.
* **Hostnames/IP Addresses:** Replace `localhost` with the appropriate hostnames or IP addresses.
* **KRAFT:** This configuration is for Kafka KRAFT mode.
* **No Zookeeper:** This configuration does not use Zookeeper.







# 1. Download and Extract Kafka 3.9.0
wget https://downloads.apache.org/kafka/3.9.0/kafka_2.13-3.9.0.tgz
tar -xzf kafka_2.13-3.9.0.tgz
cd kafka_2.13-3.9.0

# 2. Create Kafka Data Directory
mkdir -p /var/lib/kafka-data

# 3. Generate Node ID
NODE_ID=$(uuidgen)

# 4. Generate SSL Certificates (Self-Signed for Testing)
# Replace with proper certificates for production
KEYSTORE_PASS="kafkastore"
TRUSTSTORE_PASS="kafkastore"

keytool -genkey -alias kafka -keyalg RSA -keystore kafka.keystore.jks -validity 365 -storepass $KEYSTORE_PASS -dname "CN=localhost"
keytool -export -alias kafka -keystore kafka.keystore.jks -file kafka.cer -storepass $KEYSTORE_PASS
keytool -import -alias kafka -file kafka.cer -keystore kafka.truststore.jks -storepass $TRUSTSTORE_PASS

# 5. Server Configuration (config/kraft/server.properties) - SSL Only
cat <<EOF > config/kraft/server.properties
node.id=$NODE_ID
process.roles=broker,controller
controller.quorum.voters=$NODE_ID@localhost:9093
listeners=CONTROLLER://localhost:9093,SSL://localhost:9094
advertised.listeners=SSL://localhost:9094
log.dirs=/var/lib/kafka-data
security.inter.broker.protocol=SSL
listener.security.protocol.map=CONTROLLER:PLAINTEXT,SSL:SSL
ssl.keystore.location=kafka.keystore.jks
ssl.keystore.password=$KEYSTORE_PASS
ssl.truststore.location=kafka.truststore.jks
ssl.truststore.password=$TRUSTSTORE_PASS
ssl.client.auth=none # or requested or required
zookeeper.connect=unused
EOF

# 6. Start Kafka Server
bin/kafka-server-start.sh config/kraft/server.properties

# 7. Client Configuration (producer.properties, consumer.properties, admin-client.properties)

cat <<EOF > config/producer.properties
security.protocol=SSL
ssl.truststore.location=kafka.truststore.jks
ssl.truststore.password=$TRUSTSTORE_PASS
EOF

cat <<EOF > config/consumer.properties
security.protocol=SSL
ssl.truststore.location=kafka.truststore.jks
ssl.truststore.password=$TRUSTSTORE_PASS
EOF

cat <<EOF > config/admin-client.properties
security.protocol=SSL
ssl.truststore.location=kafka.truststore.jks
ssl.truststore.password=$TRUSTSTORE_PASS
EOF

# 8. Create Topic (Admin)
bin/kafka-topics.sh --bootstrap-server localhost:9094 --create --topic my-ssl-topic --partitions 1 --replication-factor 1 --command-config config/admin-client.properties

# 9. Produce Messages (SSL)
bin/kafka-console-producer.sh --bootstrap-server localhost:9094 --topic my-ssl-topic --producer.config config/producer.properties

# 10. Consume Messages (SSL)
bin/kafka-console-consumer.sh --bootstrap-server localhost:9094 --topic my-ssl-topic --from-beginning --consumer.config config/consumer.properties

# 11. Describe Topic (Admin)
bin/kafka-topics.sh --bootstrap-server localhost:9094 --describe --topic my-ssl-topic --command-config config/admin-client.properties


