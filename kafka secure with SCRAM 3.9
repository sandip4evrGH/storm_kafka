You are absolutely right, and I apologize for that oversight. The user creation commands (`bin/kafka-configs.sh`) must be executed *after* the Kafka cluster has started, as they interact with the Kafka broker to store the user credentials.

Here's the corrected and complete script, ensuring the proper order of operations:

```bash
# 1. Generate Node ID
NODE_ID=$(uuidgen)

# 2. Generate User Passwords
PASSWORD=$(openssl rand -base64 32)
ADMIN_PASSWORD=$(openssl rand -base64 32)

# 3. Server Configuration (config/kraft/server.properties)
cat <<EOF > config/kraft/server.properties
node.id=$NODE_ID
process.roles=broker,controller
controller.quorum.voters=$NODE_ID@localhost:9093
listeners=PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093,SASL_PLAINTEXT://localhost:9094
advertised.listeners=PLAINTEXT://localhost:9092,SASL_PLAINTEXT://localhost:9094
log.dirs=/var/lib/kafka-data
security.inter.broker.protocol=SASL_PLAINTEXT
sasl.mechanism.inter.broker.protocol=SCRAM-SHA-512
sasl.enabled.mechanisms=SCRAM-SHA-512
listener.security.protocol.map=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT
super.users=User:admin
authorizer.class.name=kafka.security.authorizer.AclAuthorizer
allow.everyone.if.no.acl.found=false
EOF

# 4. Start Kafka
bin/kafka-server-start.sh config/kraft/server.properties

# 5. Create Users (AFTER Kafka start)
bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --add-config 'SCRAM-SHA-512=[iterations=8192,password=$PASSWORD]' --entity-type users --entity-name myuser
bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --add-config 'SCRAM-SHA-512=[iterations=8192,password=$ADMIN_PASSWORD]' --entity-type users --entity-name admin

# 6. User Configuration (producer.properties, consumer.properties, admin-client.properties)

cat <<EOF > config/producer.properties
security.protocol=SASL_PLAINTEXT
sasl.mechanism=SCRAM-SHA-512
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="myuser" password="$PASSWORD";
EOF

cat <<EOF > config/consumer.properties
security.protocol=SASL_PLAINTEXT
sasl.mechanism=SCRAM-SHA-512
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="myuser" password="$PASSWORD";
EOF

cat <<EOF > config/admin-client.properties
security.protocol=SASL_PLAINTEXT
sasl.mechanism=SCRAM-SHA-512
sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username="admin" password="$ADMIN_PASSWORD";
EOF

# 7. Create Topic (Admin)
bin/kafka-topics.sh --bootstrap-server localhost:9094 --create --topic my-secure-topic --partitions 1 --replication-factor 1 --command-config config/admin-client.properties

# 8. Create ACLs (Admin)
bin/kafka-acls.sh --bootstrap-server localhost:9094 --add --allow-principal User:myuser --topic my-secure-topic --operation Write --command-config config/admin-client.properties
bin/kafka-acls.sh --bootstrap-server localhost:9094 --add --allow-principal User:myuser --topic my-secure-topic --operation Read --command-config config/admin-client.properties

# 9. Test Producer (myuser)
bin/kafka-console-producer.sh --bootstrap-server localhost:9094 --topic my-secure-topic --producer.config config/producer.properties

# 10. Test Consumer (myuser)
bin/kafka-console-consumer.sh --bootstrap-server localhost:9094 --topic my-secure-topic --from-beginning --consumer.config config/consumer.properties

# 11. Describe ACLs (Admin)
bin/kafka-acls.sh --bootstrap-server localhost:9094 --describe --topic my-secure-topic --command-config config/admin-client.properties

# 12. Describe Topic (Admin)
bin/kafka-topics.sh --bootstrap-server localhost:9094 --describe --topic my-secure-topic --command-config config/admin-client.properties
```

**Key Change:**

* The user creation commands (`bin/kafka-configs.sh`) are now executed *after* `bin/kafka-server-start.sh`, ensuring that the Kafka broker is running when the users are created.

This corrected script should resolve the issue and provide a functional Kafka 3.9 KRAFT cluster with SCRAM-SHA-512 authentication and ACLs.
