Ah, I see the issue now. MSAL4J doesn’t directly accept `OkHttpClient` (or `HttpClient` from OkHttp) as an argument for its HTTP client implementation. My previous example was incorrect in suggesting that the OkHttp client could be directly passed to MSAL4J's `ConfidentialClientApplication` method.

MSAL4J's `ConfidentialClientApplication` does not allow direct injection of external HTTP client types like `OkHttpClient`. Instead, MSAL4J internally uses the **Apache HttpClient** or its default HTTP library. So to integrate proxy support, we need to do the following:

### Solution:
You cannot directly use `OkHttpClient` or `HttpClient` from OkHttp with MSAL4J. However, you can configure a **proxy for MSAL4J** using **Apache HttpClient** by implementing a custom **HTTP transport layer** or simply using a system-wide proxy configuration.

Let’s go step-by-step and adjust the solution to correctly configure the proxy for MSAL4J.

### Approach:
1. **Use System Proxy**: You can set a system proxy using JVM options, and MSAL4J will respect this system-wide setting.
   
2. **Use Apache HttpClient (Indirect Proxy Support)**: If you want more fine-grained control over the proxy configuration (like specific proxy settings per client), you'd typically have to use MSAL4J with **Apache HttpClient**, which is its default transport layer.

### Option 1: Use System Proxy (Simpler Approach)

If your goal is simply to route all requests from MSAL4J through a proxy, you can set the system-wide proxy in your JVM configuration. Here’s how you can do it:

1. **Set Proxy via JVM Options**: Add the following to your Java command to set a proxy globally.

   ```bash
   -Dhttp.proxyHost=your.proxy.host
   -Dhttp.proxyPort=your.proxy.port
   -Dhttps.proxyHost=your.proxy.host
   -Dhttps.proxyPort=your.proxy.port
   ```

   This tells the JVM to use the specified proxy for all HTTP and HTTPS requests, and MSAL4J will use these settings for the authentication requests.

2. **Usage in Code**: You don’t need to modify your `CustomAuthenticateCallbackHandler` much. The system-wide proxy will be used automatically when making HTTP requests.

### Option 2: Use Apache HttpClient (Advanced Approach)

If you need more granular control over the proxy configuration or other HTTP settings, you can use **Apache HttpClient** directly with MSAL4J, but you’ll need to rely on its built-in capabilities.

MSAL4J allows for the customization of HTTP requests by extending its default `HttpClient`. You can use Apache HttpClient to intercept and configure specific proxies for MSAL4J.

Here is an example of how to achieve this using **Apache HttpClient**:

### Code with Apache HttpClient and Proxy Configuration:

```java
import com.microsoft.aad.msal4j.*;

import org.apache.http.impl.client.HttpClients;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
import org.apache.http.HttpHost;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.security.auth.AuthenticateCallbackHandler;
import org.apache.kafka.common.security.oauthbearer.OAuthBearerToken;
import org.apache.kafka.common.security.oauthbearer.OAuthBearerTokenCallback;

import javax.security.auth.callback.Callback;
import javax.security.auth.callback.UnsupportedCallbackException;
import javax.security.auth.login.AppConfigurationEntry;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.Executors;

public class CustomAuthenticateCallbackHandler implements AuthenticateCallbackHandler {

    final static ScheduledExecutorService EXECUTOR_SERVICE = Executors.newScheduledThreadPool(1);

    private String authority;
    private String appId;
    private String appSecret;
    private ConfidentialClientApplication aadClient;
    private ClientCredentialParameters aadParameters;

    private String proxyHost;
    private int proxyPort;

    @Override
    public void configure(Map<String, ?> configs, String mechanism, List<AppConfigurationEntry> jaasConfigEntries) {
        String bootstrapServer = Arrays.asList(configs.get(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG)).get(0).toString();
        bootstrapServer = bootstrapServer.replaceAll("\\[|\\]", "");
        String sbUri = "https://" + bootstrapServer;

        this.aadParameters = 
            ClientCredentialParameters.builder(Collections.singleton(sbUri + "/.default"))
            .build();

        this.authority = "https://login.microsoftonline.com/<tenant-id>/"; // replace <tenant-id> with your tenant id
        this.appId = "<app-id>"; // also called client id
        this.appSecret = "<app-password>"; // also called client secret

        // Fetch proxy settings from configs
        this.proxyHost = (String) configs.get("proxy.host");
        this.proxyPort = Integer.parseInt((String) configs.get("proxy.port"));
    }

    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
        for (Callback callback : callbacks) {
            if (callback instanceof OAuthBearerTokenCallback) {
                try {
                    OAuthBearerToken token = getOAuthBearerToken();
                    OAuthBearerTokenCallback oauthCallback = (OAuthBearerTokenCallback) callback;
                    oauthCallback.token(token);
                } catch (InterruptedException | ExecutionException | TimeoutException e) {
                    e.printStackTrace();
                }
            } else {
                throw new UnsupportedCallbackException(callback);
            }
        }
    }

    OAuthBearerToken getOAuthBearerToken() throws IOException, InterruptedException, ExecutionException, TimeoutException {
        if (this.aadClient == null) {
            synchronized (this) {
                if (this.aadClient == null) {
                    IClientCredential credential = ClientCredentialFactory.createFromSecret(this.appSecret);

                    // Configure Apache HttpClient with Proxy
                    HttpHost proxy = new HttpHost(proxyHost, proxyPort);
                    CloseableHttpClient httpClient = HttpClients.custom()
                            .setProxy(proxy)
                            .setConnectionManager(new PoolingHttpClientConnectionManager()) 
                            .setRetryHandler(new DefaultHttpRequestRetryHandler())
                            .build();

                    // Initialize the ConfidentialClientApplication with the custom HttpClient
                    this.aadClient = ConfidentialClientApplication.builder(this.appId, credential)
                            .authority(this.authority)
                            .httpClient(httpClient)  // Use Apache HttpClient with proxy
                            .build();
                }
            }
        }

        IAuthenticationResult authResult = this.aadClient.acquireToken(this.aadParameters).get();
        System.out.println("TOKEN ACQUIRED");

        return new OAuthBearerTokenImp(authResult.accessToken(), authResult.expiresOnDate());
    }

    public void close() throws KafkaException {
        // NOOP
    }
}
```

### Key Steps in this Approach:
1. **Apache HttpClient Configuration**: 
   - The `HttpClient` is configured with a proxy using `HttpHost proxy = new HttpHost(proxyHost, proxyPort)`.
   - Apache HttpClient is used by MSAL4J to make HTTP requests.

2. **Proxy Configuration**:
   - You pass the configured `HttpClient` to MSAL4J using `.httpClient(httpClient)`.

3. **Apache HttpClient Dependency**:
   - Ensure that the Apache HttpClient dependency is included in your project.

### Maven Dependency for Apache HttpClient:
```xml
<dependency>
    <groupId>org.apache.httpcomponents</groupId>
    <artifactId>httpclient</artifactId>
    <version>4.5.13</version>
</dependency>
```

### Conclusion:
- **Option 1 (System Proxy)** is the simplest and works if you just want to set the proxy globally.
- **Option 2 (Apache HttpClient)** provides more control and can be used if you need to customize HTTP requests or handle specific proxy needs for MSAL4J.

Let me know if you need more clarification or further assistance!
